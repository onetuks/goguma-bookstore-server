plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'com.epages.restdocs-api-spec' version '0.17.1'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.diffplug.spotless' version '6.21.0'
}

group = 'com.onetuks'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jar {
    enabled = false
}

jacoco {
    toolVersion = '0.8.8'
}

openapi3 {
    servers = [
            { url = "http://localhost:8080" },
            { url = "http://server:8080" }
//            { url = "https://서버url" }
    ]
    title = "Goguma-Bookstore-Server-API"
    description = "고구마서점 API"
    version = getVersion()
    format = "json" // (json / yaml)
    outputDirectory = "src/main/resources/static"
    outputFileNamePrefix = "swagger"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {

    // Netty/Resolver/DNS/Native/MacOS
    implementation 'io.netty:netty-resolver-dns-native-macos:4.1.106.Final:osx-aarch_64'

    // Spring Web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MySQL
    runtimeOnly 'com.mysql:mysql-connector-j'

    // JPA
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // RestDocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Rest Docs API Spec
    testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.0'

    // Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // TestContainers
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'

    // Arch-Unit
    testImplementation 'com.tngtech.archunit:archunit:1.2.1'

    // Spring Security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    // OAuth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

    // JWT
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'

    // Spring cache
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache', version: '3.2.0'

    // Caffeine
    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.8'

}

tasks.named('test') {
    outputs.dir snippetsDir
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }

    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            // 클래스 당 커버리지 50% 이상
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.5)
            }

            // 클래스 당 100줄 미만
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(100)
            }

            limit {
                counter = 'COMPLEXITY'
                minimum = 0.5
            }

            excludes = List.of(
                    "Q*",
                    "*.global.*",
                    "*.auth.*",
                    "*.controller.*",
                    "*Application",
                    "com.onetuks.dayonetest.MyCalculatorApplication",
            )
        }
    }
}

sonar {
    def envFile = file('../.env')
    if (envFile.exists()) {
        def env = new Properties()
        envFile.withReader { reader ->
            env.load(reader)
        }

        properties {
            property("sonar.host.url", "http://localhost:9000")
            property("sonar.login", env['SONAR_TOKEN'])
            property("sonar.sources", "src/main/java")
            property("sonar.tests", "src/test/java")
            property("sonar.sourceEncoding", "UTF-8")
            property("sonar.projectKey", "goguma-store-server")
            property("sonar.projectName", "goguma-store-server")
            property("sonar.converage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml")
        }
    } else {
        println ".env file not exists"
    }
}

spotless {
    java {
        googleJavaFormat()

        removeUnusedImports()
        trimTrailingWhitespace() // 불필요한 공백 트림
        indentWithSpaces(4) // 들여쓰기 4칸
        endWithNewline() // 파일 끝에 개행 추가
    }
}

tasks.register("addGitPreCommitHook", Copy) {
    from 'script/pre-commit'
    into '.git/hooks'
}
